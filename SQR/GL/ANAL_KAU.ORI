!***********************************************************************
!***** REPORT      : kart.sqr                                       ****
!***** DATE        : 12/04/93                                       ****
!***** APPLICATION : √≈Õ… « Àœ√…”‘… «                               ****
!***** NOTE        : ---  ¡‘¡”‘¡”«  ¡—‘≈À¡” Àœ√¡—…¡”Ãœ’ ---         ****
!***********************************************************************

#DEFINE   PAGE-Y                64
#DEFINE   PAGE-X               132 
#DEFINE   HEAD-SIZE              6
#DEFINE   FOOT-SIZE              3
#DEFINE   HEAD-LINE              4

#DEFINE   DATEMASK        DD/MM/YY
#DEFINE   SHORTDATE          DD/MM
#DEFINE   MASK1     99,999,999,999
#DEFINE   MASK7            999,999

Begin-Setup
 ASK    $L_GDATA   'GDATA '
 #INCLUDE "{$L_GDATA}/sqr/SETUP01.inc"

End-Setup

Begin-Report

 #INCLUDE "{$L_GDATA}/sqr/REPORT01.inc"
 move $L_CID to $cid

 input $apohmnia  '¡¸ «ÏÂÒÔÏÁÌﬂ·  : '
 input $evshmnia  'E˘Ú «ÏÂÒÔÏÁÌﬂ·  : '

 input $ikat      '’ÔÍ·Ù‹ÛÙÁÏ·    : '

 execute app_datecnv $apohmnia, $apohm output, $apohmpr output
 execute app_datecnv $evshmnia, $evshm output, $evshmpr output

 unstring $ikat by '"' into $filler $kat $filler

 if $kat = '*'
    let $kat = '%'
 end-if

 display $kat

 CREATE-ARRAY NAME=Log_Level 			! ”’ÕœÀ¡ ¬¡»ÃŸÕ
	      SIZE=10
              FIELD=xrevsh:number
	      FIELD=pistvsh:number

 CREATE-ARRAY NAME=Cur_Logar 			! ”’ÕœÀ¡ Àœ√¡—…¡”Ãœ’
	      SIZE=3				! Index 0 -> –ÒÔÁ„Ô˝ÏÂÌ· ”˝ÌÔÎ·
              FIELD=xrevsh:number		! Index 1 -> ”˝ÌÔÎ· –ÂÒÈ¸‰Ôı
	      FIELD=pistvsh:number  		! Index 2 -> ”˝ÌÔÎ· ”ÂÎﬂ‰·Ú

 move 0  to #genxrevsh                          ! √ÂÌÈÍ‹ ”˝ÌÔÎ·
 move 0  to #genpistvsh                         ! √ÂÌÈÍ‹ ”˝ÌÔÎ·

 move 48 to #c1
 move 88 to #c2

 move 'F' to $f_new_page

 do main

End-Report

! ****************************************************************************

begin-procedure main

  next-listing

begin-select
a.logar           () NOP
a.perigrafh       () NOP
b.xrhsh		  () NOP
b.xrhsh_arxh	  () NOP
a.post_flag	  () NOP
a.baumos	  () 			on-break 	print = never
							after = new-baumos

   move &a.baumos to #old_baumos

   do makelogform($cid, &b.xrhsh, &a.logar, $logarpr)

   If not isnull(&a.post_flag)

      do printrest

      Get #l1_xrevsh  from Cur_Logar(1) xrevsh
      Get #l1_pistvsh from Cur_Logar(1) pistvsh
      Let #ypol = #l1_xrevsh - #l1_pistvsh

      if (#l1_xrevsh <> 0) or (#l1_pistvsh <> 0)
         print '”’ÕœÀ¡ ¡Õ¡À’”«”'				(,#c1)
         print #l1_xrevsh		(,#c2,14)	edit {MASK1}
         print #l1_pistvsh		(,+1,14)	edit {MASK1}
         print #ypol 			(,+1,14)	edit {MASK1}
      
         next-listing
      end-if
	
      Get #l0_xrevsh  from Cur_Logar(0) xrevsh
      Get #l0_pistvsh from Cur_Logar(0) pistvsh
      Let #xrevsh  = #l0_xrevsh  + #l1_xrevsh
      Let #pistvsh = #l0_pistvsh + #l1_pistvsh
      Let #ypol    = #xrevsh     - #pistvsh
      
      print '” ’ Õ œ À ¡   À œ √ ¡ — … ¡ ” Ã œ ’'		(,#c1)
      print #xrevsh		(,#c2,14)	edit {MASK1}
      print #pistvsh		(,+1,14)	edit {MASK1}
      print #ypol 		(,+1,14)	edit {MASK1}

      next-listing
	
      do add-baumos(&a.baumos, #xrevsh, #pistvsh)

      put 0 into Cur_Logar(0) xrevsh
      put 0 into Cur_Logar(0) pistvsh
      put 0 into Cur_Logar(1) xrevsh
      put 0 into Cur_Logar(1) pistvsh
      put 0 into Cur_Logar(2) xrevsh
      put 0 into Cur_Logar(2) pistvsh

   end-if     

from  gl_logar a, ap_xrhsh b
where a.cid=$cid
and   b.cid=$cid
!and   a.post_flag is not null
and   $apohm between b.xrhsh_arxh and b.xrhsh_telos
[$SQLCMD]
order by a.logar
end-select

end-procedure

! ****************************************************************************

begin-procedure makelogform($cid, #xrhsh, $inlogar, :$outlogar)

  execute glp_logfrm @cid       = $cid, 
                     @xrhsh     = #xrhsh, 
                     @in_logar  = $inlogar, 
                     @out_logar = $outlogar output

end-procedure

! ****************************************************************************


begin-procedure printrest 

  print $logarpr 			   	(,01,15)
  print &a.perigrafh			   	(,+1,30)

  do getypol($cid, &a.logar, &b.xrhsh_arxh, $apohm, #pre_xrevsh, #pre_pistvsh)

  put #pre_xrevsh  into Cur_Logar(0) xrevsh
  put #pre_pistvsh into Cur_Logar(0) pistvsh

  let #pre_ypol = #pre_xrevsh - #pre_pistvsh

  if (#pre_xrevsh <> 0) or (#pre_pistvsh <> 0)
     print '’–œÀœ…–¡ –—œ«√œ’Ã≈Õ«” –≈—…œƒœ’ : '  	(,#c1,31)
     print #pre_xrevsh                          (,#c2,14) 	edit {MASK1}
     print #pre_pistvsh                         (,+1,14) 	edit {MASK1}
     print #pre_ypol                            (,+1,14) 	edit {MASK1} 

     add #pre_xrevsh  to #genxrevsh
     add #pre_pistvsh to #genpistvsh

     next-listing
  end-if

begin-select  
convert(datetime, k.hmer_e) &a.hmer_e    (,#c1,5)   edit {SHORTDATE}
k.aruro                       () NOP
k.parid                       (,+1,10)
k.kat                         (,+1,02)
k.aitia                       (,+1,17)
k.xrevsh		      (,#c2,14)   	edit {MASK1}
k.pistvsh		      (,+1,14)   	edit {MASK1}

   let #pre_ypol = #pre_ypol + &k.xrevsh - &k.pistvsh
   print #pre_ypol	      (,+1,14)		edit {MASK1}

   add &k.xrevsh  to #genxrevsh
   add &k.pistvsh to #genpistvsh

   array-add &k.xrevsh  to Cur_Logar(1) xrevsh
   array-add &k.pistvsh to Cur_Logar(1) pistvsh

   array-add &k.xrevsh  to Cur_Logar(2) xrevsh
   array-add &k.pistvsh to Cur_Logar(2) pistvsh

   next-listing need = 3

from  gl_kin  k
where k.cid   = $cid
and   k.logar = &a.logar
and   k.hmer_e between $apohm and $evshm
and   k.kat like $kat 
order by  k.hmer_e, k.aruro
end-select

end-procedure printrest

! ****************************************************************************

begin-procedure getypol ($cid, $logar, $xrhsh_arxh, $hmerapo, :#xrevsh, :#pistvsh)

begin-select  
sum(a.xrevsh)       &xrevsh    () NOP
sum(a.pistvsh)      &pistvsh   () NOP

  move  &xrevsh   to #xrevsh
  move  &pistvsh  to #pistvsh

from   gl_ypol a
where  a.cid=$cid
and    a.logar=$logar
and    a.hmeromhnia >= $xrhsh_arxh
and    a.hmeromhnia < $hmerapo
end-select

end-procedure

! ****************************************************************************

begin-procedure new-baumos 

  move &a.baumos to #baumos
  If #baumos < #old_baumos 

    Get #s_xrevsh  From Log_Level(#baumos) xrevsh
    Get #s_pistvsh From Log_Level(#baumos) pistvsh
    let #s_ypol = #s_xrevsh - #s_pistvsh

    next-listing
    print '” ’ Õ œ À ¡'		(,#c1,12)
    print #baumos			(,+1,01)
    print '- ¬¡»Ã…œ’'             (,+1,10)

    print #s_xrevsh		(,#c2,14)	edit {MASK1}
    print #s_pistvsh		(,+1,14)	edit {MASK1}
    print #s_ypol 		(,+1,14)	edit {MASK1}

    next-listing 
    next-listing 

    do zero-baumos(#baumos)
  end-if

end-procedure

! ****************************************************************************

begin-procedure add-baumos (#baumos, #xrevsh, #pistvsh)

  While #baumos > 0

    array-add #l_xrevsh  to Log_Level(#baumos) xrevsh
    array-add #l_pistvsh to Log_Level(#baumos) pistvsh

    let #baumos = #baumos - 1

  End-While

end-procedure

! ****************************************************************************

begin-procedure zero-baumos (#baumos)

  While #baumos < 10

    Put 0 into Log_Level(#baumos) xrevsh
    Put 0 into Log_Level(#baumos) pistvsh

    let #baumos = #baumos + 1

  End-While

end-procedure

! **********************************************************************
Begin-Footing {FOOT-SIZE}

 #INCLUDE "{$L_GDATA}/sqr/FOOT01.inc"


 
 Get #s_xrevsh  From Log_Level(0) xrevsh
 Get #s_pistvsh From Log_Level(0) pistvsh
 let #s_ypol = #s_xrevsh - #s_pistvsh


 ! (v) adr
 move #genxrevsh  to #s_xrevsh
 move #genpistvsh to #s_pistvsh
 let #s_ypol = #s_xrevsh - #s_pistvsh

 print '”≈ Ã≈‘¡÷œ—¡ √ ≈ Õ …   ¡   ” ’ Õ œ À ¡'		(,#c1)

 print #s_xrevsh		(2,#c2,14)	edit {MASK1}
 print #s_pistvsh		(,+1,14)	edit {MASK1}
 print #s_ypol 		        (,+1,14)	edit {MASK1}

 print $L_X2			(3,01,{PAGE-X})	fill
 
End-Footing

Begin-Heading {HEAD-SIZE}
 #INCLUDE "{$L_GDATA}/sqr/HEAD01.inc"

   print '¡ Õ ¡ À ’ ‘ …   œ     ¡ » œ À …   œ   √ ≈ Õ …   « ”   À œ √ … ” ‘ …   « ”' (2,01) center
   let $msg = '( ' || $apohmpr || ' ≈Ÿ” ' || $evshmpr || ' )'
   print $msg (3,01) center

   print 'Àœ√¡—…¡”Ãœ”'       			(5,1,15)
   print '–≈—…√—¡÷«'       			(,+1,30)

   print '«Ã≈—.'       				(,48,05)
   print '–¡—¡”/ œ'				(,+1,10)
   print '’–'      				(,+1,02)
   print '¡…‘…œÀœ√…¡'				(,+1,17)
   
   print '        ◊—≈Ÿ”«'      	            	(,88,14)  
   print '       –…”‘Ÿ”«'      	            	(,+1,14)  
   print '      ’–œÀœ…–œ'      	            	(,+1,14)  

   move 'T' to $f_new_page

End-Heading

